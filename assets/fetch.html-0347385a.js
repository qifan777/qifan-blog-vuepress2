import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,b as e,e as t,a as p}from"./app-21ba1c83.js";const o={},c=t("p",null,"Hibernate中的数据懒加载和提前加载，根据需要可以动态的加载需要的数据。可以说是SQL中select ...",-1),l=p(`<h1 id="_3-抓取数据-fetch" tabindex="-1"><a class="header-anchor" href="#_3-抓取数据-fetch" aria-hidden="true">#</a> 3. 抓取数据（Fetch）</h1><p>在查询的时候返回太多的数据对于 JDBC 传输数据和 ResultSet 处理过程都是不必要的开销，抓取太少的数据会导致执行额外的查询语句也降低了执行效率。所以说调节数据抓取的深度和广度对应用的性能影响是是很大的。</p><h2 id="_3-1-基础概念" tabindex="-1"><a class="header-anchor" href="#_3-1-基础概念" aria-hidden="true">#</a> 3.1 基础概念</h2><p>抓取数据本身的概念可以将抓取数据产生的问题分成两种问题。</p><ul><li><p>数据什么时候会被抓取？提前（<code>EAGER</code>）还是稍后（<code>LAZY</code>）</p></li><li><p>数据应该被怎么抓取</p></li></ul><blockquote><p>提前（eager）：在查询的同时返回所需要的数据</p><p>稍后（lazy）：在需要用到该数据时，再自动调用查询去获取数据。</p><p>如果百分白确定数据是一定是会被使用的，使用eager策略。如果是可能会使用则lazy。</p></blockquote><p>下面有几个范围（scope）用来定义抓取数据的行为</p><p><em><strong>静态（static）</strong></em></p><p>静态定义的抓取策略是在数据映射过程执行的，静态策略是在没有动态策略情况下的备用策略。</p><p>​ <strong>SELECT</strong></p><p>​ 执行额外的SQL去抓取数据，这种行为可以是 <code>EAGER</code>（立即发送一条SQL去抓取数据），也可以是<code>LAZY</code>（在数据被访问的时候再发送一条SQL去抓取数据）. 这种策略通常称为 <code>N+1</code>。</p><p>​ <strong>JOIN</strong></p><p>​ 这种策略是只能是<code>EAGER</code>。数据会在通过 OUT JOIN 抓取，所以这种方式只需要执行一条sql语句效率较高。</p><p>​ <strong>BATCH</strong></p><p>​ 执行额外的SQL去加载一些相关的数据通过 IN （:ids）来限制。和<code>SELECT</code>一样也分为 <code>EAGER</code>和<code>LAZY</code></p><p>​ <strong>SUBSELECT</strong></p><p>​ 执行额外的SQL加载关联的数据。和<code>SELECT</code>一样也分为 <code>EAGER</code>和<code>LAZY</code></p><p><em><strong>动态（dynamic）</strong></em></p><blockquote><p>动态加载：在运行时选择需要加载的数据</p></blockquote><p>​</p><p>​ <strong>fetch profiles</strong></p><p>​ 在实体类的映射上面定义，但是可以在执行查询的时候选择启用或者禁用。</p><p>​ <strong>JPQL / Criteria</strong></p><p>​ JPQL 是JPA规范的查询语句 和 JPA Criteria （JPQL的Java版本）都可以在查询的时候指定要抓取的数据。</p><p>​ <strong>entity graph</strong></p><p>​ 使用 JPA EntityGraphs</p><h2 id="_3-2-直接抓取和实体查询" tabindex="-1"><a class="header-anchor" href="#_3-2-直接抓取和实体查询" aria-hidden="true">#</a> 3.2 直接抓取和实体查询</h2><p>要了解直接抓取数据和实体查询在提前地抓（<code>eagerly</code>）取关联数据上的区别，可以看下面这个例子。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Department&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Department</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Id</span>
	<span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

	<span class="token comment">//Getters and setters omitted for brevity</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Employee&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Id</span>
	<span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@NaturalId</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@ManyToOne</span><span class="token punctuation">(</span>fetch <span class="token operator">=</span> <span class="token class-name">FetchType</span><span class="token punctuation">.</span><span class="token constant">EAGER</span><span class="token punctuation">)</span>
	<span class="token keyword">private</span> <span class="token class-name">Department</span> department<span class="token punctuation">;</span>

	<span class="token comment">//Getters and setters omitted for brevity</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Employee</code>拥有和<code>Department</code>的<code>@ManyToOne</code>关联并且是提前抓取该关联。</p><p><em>直接抓取例子</em></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Employee</span> employee <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 生成的sql</span>
<span class="token keyword">select</span>
    e<span class="token punctuation">.</span>id <span class="token keyword">as</span> id1_1_0_<span class="token punctuation">,</span>
    e<span class="token punctuation">.</span>department_id <span class="token keyword">as</span> departme3_1_0_<span class="token punctuation">,</span>
    e<span class="token punctuation">.</span>username <span class="token keyword">as</span> username2_1_0_<span class="token punctuation">,</span>
    d<span class="token punctuation">.</span>id <span class="token keyword">as</span> id1_0_1_
<span class="token keyword">from</span>
    Employee e
<span class="token keyword">left</span> <span class="token keyword">outer</span> <span class="token keyword">join</span>
    Department d
        <span class="token keyword">on</span> e<span class="token punctuation">.</span>department_id<span class="token operator">=</span>d<span class="token punctuation">.</span>id
<span class="token keyword">where</span>
    e<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看见，直接抓取通过 out join 加载了关联的数据。原因是因为<code>Employee</code>配置了<code> @ManyToOne(fetch = FetchType.EAGER)</code>，意味着需要在查找<code>Employee</code>的同时也把<code>Department</code>加载出来。</p><p><em>实体查询例子</em></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Employee</span> employee <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>
		<span class="token string">&quot;select e &quot;</span> <span class="token operator">+</span>
		<span class="token string">&quot;from Employee e &quot;</span> <span class="token operator">+</span>
		<span class="token string">&quot;where e.id = :id&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Employee</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">setParameter</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">getSingleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 生成的sql</span>
<span class="token keyword">select</span>
    e<span class="token punctuation">.</span>id <span class="token keyword">as</span> id1_1_<span class="token punctuation">,</span>
    e<span class="token punctuation">.</span>department_id <span class="token keyword">as</span> departme3_1_<span class="token punctuation">,</span>
    e<span class="token punctuation">.</span>username <span class="token keyword">as</span> username2_1_
<span class="token keyword">from</span>
    Employee e
<span class="token keyword">where</span>
    e<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">1</span>

<span class="token keyword">select</span>
    d<span class="token punctuation">.</span>id <span class="token keyword">as</span> id1_0_0_
<span class="token keyword">from</span>
    Department d
<span class="token keyword">where</span>
    d<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看见一共生成了两条sql，原因是在查询的时候没有加载<code>Department</code>，而在<code>Employee</code>中又配置了它需要<code>Department</code>。所以Hibernate通过再生成一条sql查询来保证<code>@ManyToOne(fetch = FetchType.EAGER)</code>，同时又不影响第一条的sql语句。</p><blockquote><p>上面的例子提醒了我们，如果我们在关联上配置了 <code>fetch = FetchType.EAGER</code> 那么我们在写实体查询的时候就要使用<code>join fetch</code>去将配置了上诉注解的关联加载出来。要不然就会出现<code>N+1</code>的性能问题，生成了额外的查询语句。</p></blockquote><h2 id="_3-3-不抓取数据" tabindex="-1"><a class="header-anchor" href="#_3-3-不抓取数据" aria-hidden="true">#</a> 3.3 不抓取数据</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Department&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Department</span> <span class="token punctuation">{</span>

		<span class="token annotation punctuation">@Id</span>
		<span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

		<span class="token annotation punctuation">@OneToMany</span><span class="token punctuation">(</span>mappedBy <span class="token operator">=</span> <span class="token string">&quot;department&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> employees <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//Getters and setters omitted for brevity</span>
	<span class="token punctuation">}</span>

	<span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Employee&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>

		<span class="token annotation punctuation">@Id</span>
		<span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

		<span class="token annotation punctuation">@NaturalId</span>
		<span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>

		<span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;pswd&quot;</span><span class="token punctuation">)</span>
		<span class="token annotation punctuation">@ColumnTransformer</span><span class="token punctuation">(</span>
			read <span class="token operator">=</span> <span class="token string">&quot;decrypt(&#39;AES&#39;, &#39;00&#39;, pswd )&quot;</span><span class="token punctuation">,</span>
			write <span class="token operator">=</span> <span class="token string">&quot;encrypt(&#39;AES&#39;, &#39;00&#39;, ?)&quot;</span>
		<span class="token punctuation">)</span>
		<span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>

		<span class="token keyword">private</span> <span class="token keyword">int</span> accessLevel<span class="token punctuation">;</span>

		<span class="token annotation punctuation">@ManyToOne</span><span class="token punctuation">(</span>fetch <span class="token operator">=</span> <span class="token class-name">FetchType</span><span class="token punctuation">.</span><span class="token constant">LAZY</span><span class="token punctuation">)</span>
		<span class="token keyword">private</span> <span class="token class-name">Department</span> department<span class="token punctuation">;</span>

		<span class="token annotation punctuation">@ManyToMany</span><span class="token punctuation">(</span>mappedBy <span class="token operator">=</span> <span class="token string">&quot;employees&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Project</span><span class="token punctuation">&gt;</span></span> projects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//Getters and setters omitted for brevity</span>
	<span class="token punctuation">}</span>

	<span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Project&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Project</span> <span class="token punctuation">{</span>

		<span class="token annotation punctuation">@Id</span>
		<span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

		<span class="token annotation punctuation">@ManyToMany</span>
		<span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> employees <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//Getters and setters omitted for brevity</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于登录这个场景，我们只需要<code>Employee</code>的 username 和 password，并不需要<code>Project</code>也不需要<code>Department</code>的信息。</p><p>针对这种情况，我们可以在关联的上配置<code>fetch = FetchType.LAZY</code>，但是我们发现为什么<code>@ManyToMany</code>没有配置<code>fetch = FetchType.LAZY</code>。那是因为 JPA规定了<code>@OneToOne</code> 和<code>@ManyToOne</code>默认是<code>fetch = FetchType.EAGER</code>，而其他的关联默认是<code>LAZY</code>。也可以说，如果关联的是一个集合（Collection），那么这个关系就是懒加载。<code>@OneToMany</code>和<code>@ManyToOne</code>都是作用在关联实体集合上所以说它们是懒加载。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Employee</span> employee <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>
	<span class="token string">&quot;select e &quot;</span> <span class="token operator">+</span>
	<span class="token string">&quot;from Employee e &quot;</span> <span class="token operator">+</span>
	<span class="token string">&quot;where &quot;</span> <span class="token operator">+</span>
	<span class="token string">&quot;	e.username = :username and &quot;</span> <span class="token operator">+</span>
	<span class="token string">&quot;	e.password = :password&quot;</span><span class="token punctuation">,</span>
	<span class="token class-name">Employee</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">setParameter</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">setParameter</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">,</span> password<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">getSingleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在上面的实体查询就不会触发额外的sql语句，只会从<code>Employee</code>中获取数据。</p><h2 id="_3-4-动态抓取" tabindex="-1"><a class="header-anchor" href="#_3-4-动态抓取" aria-hidden="true">#</a> 3.4 动态抓取</h2><p>第二种场景，页面上需要显示<code>Employee</code>的<code>Projects</code>，但是不需要显示<code>Department</code>。所以我们需要加载<code>Employee</code>和它关联的<code>Projects</code></p><h3 id="_3-4-1-通过查询动态抓取" tabindex="-1"><a class="header-anchor" href="#_3-4-1-通过查询动态抓取" aria-hidden="true">#</a> 3.4.1 通过查询动态抓取</h3><p><em><strong>通过 JPQL 动态抓取</strong></em></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// left join fetch 取得关联的数据</span>
<span class="token class-name">Employee</span> employee <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>
	<span class="token string">&quot;select e &quot;</span> <span class="token operator">+</span>
	<span class="token string">&quot;from Employee e &quot;</span> <span class="token operator">+</span>
	<span class="token string">&quot;left join fetch e.projects &quot;</span> <span class="token operator">+</span>
	<span class="token string">&quot;where &quot;</span> <span class="token operator">+</span>
	<span class="token string">&quot;	e.username = :username and &quot;</span> <span class="token operator">+</span>
	<span class="token string">&quot;	e.password = :password&quot;</span><span class="token punctuation">,</span>
	<span class="token class-name">Employee</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">setParameter</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">setParameter</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">,</span> password<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">getSingleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>通过 JPA Criteria动态抓取</strong></em></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">CriteriaBuilder</span> builder <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">getCriteriaBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">CriteriaQuery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> query <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Root</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> root <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// fetch 取得 projects数据</span>
root<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;projects&quot;</span><span class="token punctuation">,</span> <span class="token class-name">JoinType</span><span class="token punctuation">.</span><span class="token constant">LEFT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
query<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>
	builder<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>
		builder<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">,</span>
		builder<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> password<span class="token punctuation">)</span>
	<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Employee</span> employee <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSingleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面两个案例表单意思是一样的，写法不同。都是 JPA 规定的查询语法分表叫<code>JPQL</code> 和<code>Criteria Api </code>。通过<code>fetch</code>可以取得所需的数据，在查询的同时会生成 out join 去加载相关联的数据。通过上面这种方法动态加载，只需要一条sql语句就可以获取所需的数据。</p><h3 id="_3-4-2-通过entitygraph动态抓取" tabindex="-1"><a class="header-anchor" href="#_3-4-2-通过entitygraph动态抓取" aria-hidden="true">#</a> 3.4.2 通过EntityGraph动态抓取</h3><p>JPA还支持通过一种叫<code>EntityGraphs</code>的特性来动态加载数据。通过这种方式可以更加精细化的来控制加载数据。它有两种模式可以选择</p><p>​ <strong>fetch mode</strong></p><p>​ 在<code>EntityGraph</code>中指定的所有关系都需要提前加载，没有指定的其他关系在都认为是懒加载。</p><p>​ <strong>load graph</strong></p><p>​ 在<code>EntityGraph</code>中指定的所有关系都需要提前加载，没有指定的其他关系按照静态（参考3.1）策略。</p><p>下面定义一个基础的<code>EntityGraph</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Employee&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@NamedEntityGraph</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;employee.projects&quot;</span><span class="token punctuation">,</span>
	attributeNodes <span class="token operator">=</span> <span class="token annotation punctuation">@NamedAttributeNode</span><span class="token punctuation">(</span><span class="token string">&quot;projects&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 查询的时候使用EntityGraph</span>
<span class="token class-name">Employee</span> employee <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>
	<span class="token class-name">Employee</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
	userId<span class="token punctuation">,</span>
	<span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonMap</span><span class="token punctuation">(</span>
		<span class="token string">&quot;jakarta.persistence.fetchgraph&quot;</span><span class="token punctuation">,</span>
		entityManager<span class="token punctuation">.</span><span class="token function">getEntityGraph</span><span class="token punctuation">(</span><span class="token string">&quot;employee.projects&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>如果你想对关联的实体类嵌套定义<code>EntityGraph</code>可以使用<code>@NamedSubgraph</code>。</p></blockquote>`,63);function i(u,d){return s(),a("div",null,[c,e(" more "),l])}const v=n(o,[["render",i],["__file","fetch.html.vue"]]);export{v as default};
