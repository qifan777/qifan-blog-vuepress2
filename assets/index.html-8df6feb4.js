import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as t,c as r,e,f as a,d as o,a as i}from"./app-4221f1d2.js";const d={},c=i('<h1 id="chatgpt-assistant" tabindex="-1"><a class="header-anchor" href="#chatgpt-assistant" aria-hidden="true">#</a> ChatGPT-Assistant</h1><h2 id="项目介绍" tabindex="-1"><a class="header-anchor" href="#项目介绍" aria-hidden="true">#</a> 项目介绍</h2><p>本次项目是基于ChatGPT的二次开发网站，旨在实现在线聊天的功能。<br> 使用的技术有前端框架Vue3、TypeScript和ElementUI以及后端技术SpringBoot、MongoDB、Spring Data MongoDB和Spring WebSocket。</p><h3 id="自我介绍" tabindex="-1"><a class="header-anchor" href="#自我介绍" aria-hidden="true">#</a> 自我介绍</h3>',4),p={href:"https://space.bilibili.com/357290237",target:"_blank",rel:"noopener noreferrer"},h=e("br",null,null,-1),u=i(`<h3 id="主要功能" tabindex="-1"><a class="header-anchor" href="#主要功能" aria-hidden="true">#</a> 主要功能</h3><ol><li>登录注册<br> 用户sa-token管理用户的session。</li><li>在线聊天<br> 用户在聊天框输入内容并发送给后端，后端将请求转发到Open AI的Chat GPT接口，返回数据后通过WebSocket推送给用户。</li></ol><h3 id="项目运行" tabindex="-1"><a class="header-anchor" href="#项目运行" aria-hidden="true">#</a> 项目运行</h3><h4 id="clone仓库" tabindex="-1"><a class="header-anchor" href="#clone仓库" aria-hidden="true">#</a> clone仓库</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/qifan777/chatgpt-assistant.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="目录介绍" tabindex="-1"><a class="header-anchor" href="#目录介绍" aria-hidden="true">#</a> 目录介绍</h4><ul><li>bom 依赖管理</li><li>chatgpt-assistant-client vue客户端 <ul><li>src <ul><li>api 存放调用后端的接口</li><li>assets 静态资源图片等</li><li>components 通用的组件</li><li>router 路由</li><li>stores pinia状态管理</li><li>views 页面 <ul><li>home <ul><li>components home页面使用的私有组件</li><li>HomeView.vue home页面</li></ul></li></ul></li></ul></li></ul></li><li>chatgpt-assistant-server java核心代码</li><li>infrastructure 基础设施 <ul><li>infrastructure-common 通用的类</li><li>infrastructure-generator 代码生成器 <ul><li>generator-core 注解定义</li><li>generator-processor 生成器逻辑</li></ul></li><li>infrastructure-security 通用登录认证拦截器</li></ul></li></ul><h4 id="环境安装" tabindex="-1"><a class="header-anchor" href="#环境安装" aria-hidden="true">#</a> 环境安装</h4><ul><li>jdk 17</li><li>mongodb<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span>
  <span class="token parameter variable">--name</span> mongo <span class="token punctuation">\\</span>
  <span class="token parameter variable">-e</span> <span class="token assign-left variable">MONGO_INITDB_ROOT_USERNAME</span><span class="token operator">=</span>root <span class="token punctuation">\\</span>
  <span class="token parameter variable">-e</span> <span class="token assign-left variable">MONGO_INITDB_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token punctuation">\\</span>
  <span class="token parameter variable">-p</span> <span class="token number">27017</span>:27017 <span class="token punctuation">\\</span>
  mongo:6.0.5-jammy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>node18</li></ul><h4 id="运行" tabindex="-1"><a class="header-anchor" href="#运行" aria-hidden="true">#</a> 运行</h4><p><strong>前端</strong></p><ol><li>vscode/webstorm导入chatgpt-assistant-client</li><li>运行命令<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span>
<span class="token function">npm</span> run dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p><strong>后端</strong></p><ol><li>idea 导入chatgpt-assistant整个文件夹</li><li>mvn install</li><li>运行chatgpt-assistant-server下的Application。</li></ol><h2 id="第一期" tabindex="-1"><a class="header-anchor" href="#第一期" aria-hidden="true">#</a> 第一期</h2><h2 id="第二期" tabindex="-1"><a class="header-anchor" href="#第二期" aria-hidden="true">#</a> 第二期</h2><p>本期内容实现了登陆了功能。<br> 实现的逻辑分下面几个步骤</p><ol><li>代码生成器生成controller，service，repository，mapper，dto。</li><li>编写login接口接收用户名和密码。</li><li>login处理逻辑中调用mongoTemplate查询用户名是否存在不存在则创建一个用户，密码使用BCrypt加密。最后调用sa-token发放token给用户。</li><li>后端使用idea请求测试工具测试接口和idea中连接mongodb。</li><li>在前端复制生成的type定义和api接口，在登录界面中发起login请求。需要在vite中配置转发前端的请求到后端。登录成功在浏览器中存储token并跳转到首页。</li></ol><h2 id="第三期" tabindex="-1"><a class="header-anchor" href="#第三期" aria-hidden="true">#</a> 第三期</h2><p>本期内容实现了认证拦截Starter，统一异常处理，统一异常返回。<br> 在springboot3中的starter有所变化。现在需要在<br> classpath:META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports<br> 中声明需要引入的configuration。在每个configuration中可以写一些判断条件来确定是否要被引入spring容器中。</p><p>在统一异常拦截中我们拦截到了NotLoginException，并将改异常转成我们系统的统一返回结果+自定义的异常编码通知前端。前端可以根据异常编码知道用户此时的状态。</p><h2 id="第四期" tabindex="-1"><a class="header-anchor" href="#第四期" aria-hidden="true">#</a> 第四期</h2><p>本期实现内容有</p><ol><li>页面的统一页头。通过在index页面中添加子路由的形式，使得所有的子路由都获得夫路由的样式即index页面的样式。因此我们首先在index页面中写上页头的样式然后在index路由下配置子路由。</li><li>页面切换的过度效果。在vue的官方文档中有介绍<code>&lt;transition/&gt;</code>组件的用法。页面的过度有进入页面时从无到有的过程，以及离开页面时从有到无的过程。两个阶段四个过程。通过css样式来调整过渡的效果</li></ol><h2 id="第五期" tabindex="-1"><a class="header-anchor" href="#第五期" aria-hidden="true">#</a> 第五期</h2><ol><li>菜单子路由跳转。鼠标点击左侧的菜单切换激活状态并且右侧内容随之改变。</li><li>在首页获取个人信息存储到pinia全局状态管理。然后在个人信息界面从全局状态中加载用户信息。</li><li>编辑用户信息时上传头像到后端，后端再上传到阿里云oss返回url结果给前端。</li></ol><h2 id="第六期" tabindex="-1"><a class="header-anchor" href="#第六期" aria-hidden="true">#</a> 第六期</h2><ol><li>学习如何使用dto。不同的dto对应不同的场景，有效的将原理集中在一个类上的复杂逻辑分解到各个dto。</li><li>自定义实体类在dto直接的映射，不同的场景同一个字段的校验逻辑或者显示内容不同。</li><li>前端部分深入理解路由实现路由到页面的props传参。</li></ol><h2 id="第七期" tabindex="-1"><a class="header-anchor" href="#第七期" aria-hidden="true">#</a> 第七期</h2><ol><li>聊天会话和聊天消息的实体类设计，一个聊天会话包含多条聊天消息。聊天会话中的创建用户使用<code>@CreatedBy</code> 自动在创建时设置当前用户的信息。</li><li>聊天会话通过自定义关联mongoDB查询得到属于该聊天会话下的消息。</li><li>使用MapStruct解决实体类之间的循环依赖。</li><li>spring websocket的接入，并配置了Stomp协议。开箱即用的消息发送和消息转发功能。并配置了从http升级到websocket的握手，根据http请求头中的cookie或者token获取当前登录的用户信息。</li></ol>`,30);function b(m,g){const n=l("ExternalLinkIcon");return t(),r("div",null,[c,e("p",null,[e("a",p,[a("我是起凡"),o(n)]),a("，一名全栈程序员，刚刚毕业于华侨大学。主要技术栈后端SpringBoot,JPA("),h,a(" Hibernate), MongoDB, Mybatis, SQL等。前端Vue3, Typescript, Taro小程序, Uni-App等。")]),u])}const k=s(d,[["render",b],["__file","index.html.vue"]]);export{k as default};
