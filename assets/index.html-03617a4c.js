import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o,c,e as n,f as a,d as l,a as s}from"./app-8bdc0ac5.js";const i={},u=s(`<h1 id="第八期-stream-请求-chatgpt-websocket-推送响应" tabindex="-1"><a class="header-anchor" href="#第八期-stream-请求-chatgpt-websocket-推送响应" aria-hidden="true">#</a> 第八期 Stream 请求 ChatGPT/WebSocket 推送响应</h1><h2 id="本期内容" tabindex="-1"><a class="header-anchor" href="#本期内容" aria-hidden="true">#</a> 本期内容</h2><ol><li>使用 Websocket Stomp 协议配合<code>@MessageMapping</code>和<code>@Payload</code> 开放消息接口，和接收 JSON 请求体。</li><li>实现私有订阅，服务器将请求的结果响应给对应的用户，而不是广播给所有用户。</li><li>使用 Proxy 将请求转发给 OpenAI。</li><li>对代码进行逻辑分层，让代码更清晰。</li></ol><h2 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h2><h3 id="_1-websocketcontroller-接收消息" tabindex="-1"><a class="header-anchor" href="#_1-websocketcontroller-接收消息" aria-hidden="true">#</a> 1. WebsocketController 接收消息</h3><p>与 MVC 中的 Controller 不同，这边不能使用<code>@RestController</code>需要用<code>@Controller</code>。<code>@AllArgsConstructor</code>是 lombok 提供的一个为类中的属性生成构成器的注解。这样我们可以方便的使用 Spring 推荐的构造器依赖注入。</p><p><code>@MessageMapping</code>类似于<code>@RequestMapping</code>用来标识消息路由。它不仅可以加在方法上，也可以加载类上。加在类上那就表名类中的所有消息路由都会拼接上这个路径。</p><p>在被<code>@MessageMapping</code>标识的方法中（如下的 chat 方法），可以使用<code>@Payload</code>解析 JSON 格式的消息体和<code>@RequestBody</code>一样。同时也可以配合<code>@Valid</code>或者<code>@Validated</code>做参数校验。</p><p>chat()方法的第二个参数接收了<code>Principle</code>。它代表着在 websocket 的 handshake 阶段获取到的用户信息。可以参考<code>io.qifan.chatgpt.assistant.infrastructure.websocket.UserHandshakeHandler#determineUser</code>这个方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Controller</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebsocketChatMessageController</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ChatMessageService</span> chatMessageService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@MessageMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/chatMessage/send&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">chat</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Payload</span> <span class="token class-name">ChatMessageCreateRequest</span> requestMessage<span class="token punctuation">,</span> <span class="token class-name">Principal</span> principal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        chatMessageService<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>requestMessage<span class="token punctuation">,</span> principal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),k=s("<p>此外，在被<code>@MessageMapping</code>标识的方法中还可以接收</p><ol><li><code>@Headers</code>或者<code>@Header</code>获取 Stomp 协议中的消息头，和 http 协议中的请求头类似。</li><li><code>@DestinationVariable</code>获取<code>@MessageMapping(&quot;/chat/{id}&quot;)</code>的 id 变量。和<code>@PathVariable</code>一样</li><li>接受完整的<code>Message</code>对象，其中包含消息头和消息体消息目标路由等。</li></ol>",2),r={href:"https://docs.spring.io/spring-framework/reference/web/websocket/stomp/handle-annotations.html",target:"_blank",rel:"noopener noreferrer"},d=s(`<h3 id="_2-发送消息" tabindex="-1"><a class="header-anchor" href="#_2-发送消息" aria-hidden="true">#</a> 2 发送消息</h3><p>发送消息的逻辑包含下面四个步骤。</p><ol><li>GPT 配置校验</li><li>创建 OpenAIService 用于调用 OpenAI 接口。</li><li>构造请求参数，将用户发送的内容以及用户的 GPT 配置填充到请求中。</li><li>发送请求并将响应的结果通过私有订阅地址推送给响应的用户。</li></ol><h4 id="_2-1-gpt-配置校验" tabindex="-1"><a class="header-anchor" href="#_2-1-gpt-配置校验" aria-hidden="true">#</a> 2.1 GPT 配置校验</h4><p>在正式调用 OpenAI 的 GPT 接口之前，需要做一些基础配置的校验。只有这些基础数据校验通过后才能保障后面的代码正常运行。如果不存在 API Key 则无法调用 OpenAI 的 GPT 接口。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendMessageService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MongoTemplate</span> mongoTemplate<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 校验用户是否存在GPT配置以及GPT配置中是否已经配置了API Key
     *
     * <span class="token keyword">@param</span> <span class="token parameter">principal</span> 握手阶段得到的用户信息
     * <span class="token keyword">@return</span> 该用户的GPT配置
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">ChatConfig</span> <span class="token function">checkConfig</span><span class="token punctuation">(</span><span class="token class-name">Principal</span> principal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;GPT配置校验，当前用户：{}&quot;</span><span class="token punctuation">,</span> principal<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ChatConfig</span> chatConfig <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>mongoTemplate<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token class-name">Query</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">Criteria</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&quot;createdBy.id&quot;</span><span class="token punctuation">)</span>
                                                                                              <span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span>principal<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                                                          <span class="token class-name">ChatConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                                        <span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ResultCode<span class="token punctuation">.</span>NotFindError</span><span class="token punctuation">,</span>
                                                                                 <span class="token string">&quot;请配置API Key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>chatConfig<span class="token punctuation">.</span><span class="token function">getApiKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ResultCode<span class="token punctuation">.</span>ValidateError</span><span class="token punctuation">,</span> <span class="token string">&quot;请配置API Key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;GPT配置校验通过，配置内容：{}&quot;</span><span class="token punctuation">,</span> chatConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> chatConfig<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-创建-openaiservice" tabindex="-1"><a class="header-anchor" href="#_2-2-创建-openaiservice" aria-hidden="true">#</a> 2.2 创建 OpenAIService</h4><p>配置 proxy，通过 proxy 转发给 OpenAI。先定义 Property 配置类，spring boot 会自动读取 application.yml 中的配置信息到配置类中。在代码中注入该配置类就可以获取到 yml 中的配置信息了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;gpt&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GPTProperty</span> <span class="token punctuation">{</span>
    <span class="token class-name">Proxy</span> proxy<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Data</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> host<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">Integer</span> port<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 下面是我的代理信息，你们可以根据自己的实际情况更换host和port</span>
<span class="token key atrule">gpt</span><span class="token punctuation">:</span>
  <span class="token key atrule">proxy</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">7890</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>引入封装好的OpenAI API。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.theokanning.openai-gpt3-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>service<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.12.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面开始创建 OpenAIService，用于发送请求。在创建 OpenAIService 时我们配置了它底层的代理，API Key 以及 Jackson 序列化和反序列化。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendMessageService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MongoTemplate</span> mongoTemplate<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">GPTProperty</span> gptProperty<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ChatConfig</span> <span class="token function">checkConfig</span><span class="token punctuation">(</span><span class="token class-name">Principal</span> principal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//...</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@param</span> <span class="token parameter">chatConfig</span> 用户的GPT配置
     * <span class="token keyword">@return</span> OpenAIService用于调用OpenAI接口
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">OpenAiService</span> <span class="token function">createOpenAIService</span><span class="token punctuation">(</span><span class="token class-name">ChatConfig</span> chatConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;开始创建OpenAIService&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token function">defaultObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Proxy</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token class-name">Proxy<span class="token punctuation">.</span>Type</span><span class="token punctuation">.</span><span class="token constant">HTTP</span><span class="token punctuation">,</span>
                                <span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span>gptProperty<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                                      gptProperty<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">OkHttpClient</span> client <span class="token operator">=</span> <span class="token function">defaultClient</span><span class="token punctuation">(</span>chatConfig<span class="token punctuation">.</span><span class="token function">getApiKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMinutes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">proxy</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Retrofit</span> retrofit <span class="token operator">=</span> <span class="token function">defaultRetrofit</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> mapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">OpenAiApi</span> api <span class="token operator">=</span> retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">OpenAiApi</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OpenAiService</span><span class="token punctuation">(</span>api<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-构造-chatgpt-请求" tabindex="-1"><a class="header-anchor" href="#_2-3-构造-chatgpt-请求" aria-hidden="true">#</a> 2.3 构造 ChatGPT 请求</h4><p>构造的 ChatGPT 请求参数需要包含用户的历史发送消息和 GPT 的历史回复消息，这样它才能记住你们之前的对话内容。所以可以看见我开始的时候根据聊天会话查询该会话内的聊天记录，然后将最新的消息插入到历史消息的尾部。还需要填写要使用的 GPT 模型，默认是 3.5。还有随机性，话题新鲜度，最大回复数。最后我们选择了请求方式是 stream，这样可以一个个字的得到 ChatGPT 的响应，而不是长时间的等待最后得到一个结果。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendMessageService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MongoTemplate</span> mongoTemplate<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">GPTProperty</span> gptProperty<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ChatConfig</span> <span class="token function">checkConfig</span><span class="token punctuation">(</span><span class="token class-name">Principal</span> principal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//...</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token class-name">OpenAiService</span> <span class="token function">createOpenAIService</span><span class="token punctuation">(</span><span class="token class-name">ChatConfig</span> chatConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//...</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 构造ChatGPT请求参数
     *
     * <span class="token keyword">@param</span> <span class="token parameter">chatMessage</span> 用户的发送内容
     * <span class="token keyword">@param</span> <span class="token parameter">chatConfig</span>  用户的GPT配置信息
     * <span class="token keyword">@return</span> 返回包含用户发送内容+配置信息的ChatGPT请求参数。
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">ChatCompletionRequest</span> <span class="token function">createChatRequest</span><span class="token punctuation">(</span><span class="token class-name">ChatMessage</span> chatMessage<span class="token punctuation">,</span> <span class="token class-name">ChatConfig</span> chatConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ChatMessage</span><span class="token punctuation">&gt;</span></span> chatMessageList <span class="token operator">=</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">Query</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">Criteria</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&quot;session.id&quot;</span><span class="token punctuation">)</span>
                                                                                   <span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span>chatMessage<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                                                                                  <span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                                               <span class="token class-name">ChatMessage</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        chatMessageList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>chatMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ChatCompletionRequest</span> chatCompletionRequest <span class="token operator">=</span> <span class="token class-name">ChatCompletionRequest</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                                                           <span class="token punctuation">.</span><span class="token function">messages</span><span class="token punctuation">(</span>chatMessageList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                                                                                    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>chatMessageMapper<span class="token operator">::</span><span class="token function">entityToMessage</span><span class="token punctuation">)</span>
                                                                                                    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>
                                                                                                            <span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                                                                           <span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span>chatConfig<span class="token punctuation">.</span><span class="token function">getModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                                                                           <span class="token punctuation">.</span><span class="token function">presencePenalty</span><span class="token punctuation">(</span>
                                                                                   chatConfig<span class="token punctuation">.</span><span class="token function">getPresencePenalty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                                                                           <span class="token punctuation">.</span><span class="token function">temperature</span><span class="token punctuation">(</span>chatConfig<span class="token punctuation">.</span><span class="token function">getTemperature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                                                                           <span class="token punctuation">.</span><span class="token function">maxTokens</span><span class="token punctuation">(</span>chatConfig<span class="token punctuation">.</span><span class="token function">getMaxTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                                                                           <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
                                                                           <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;请求体：{}&quot;</span><span class="token punctuation">,</span> chatCompletionRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> chatCompletionRequest<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还需要在 ChatMessageMapper 中添加我们的 ChatMessage 实体类和第三方包中的 ChatMessage 映射，这样我们可以方便的构造请求参数。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ChatMessageMapper</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>theokanning<span class="token punctuation">.</span>openai<span class="token punctuation">.</span>completion<span class="token punctuation">.</span>chat<span class="token punctuation">.</span></span>ChatMessage</span> <span class="token function">entityToMessage</span><span class="token punctuation">(</span><span class="token class-name">ChatMessage</span> entity<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-发送请求和推送消息" tabindex="-1"><a class="header-anchor" href="#_2-4-发送请求和推送消息" aria-hidden="true">#</a> 2.4 发送请求和推送消息</h4><p>在<code>io.qifan.chatgpt.assistant.gpt.session.ChatSession.Statistic</code>新增 plusChat 和 plusToken 方法。方便统计用户调用 GPT 接口时的消耗情况。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Statistic</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> charCount<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> tokenCount<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Statistic</span> <span class="token function">plusChar</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> charCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>charCount <span class="token operator">+=</span> charCount<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Statistic</span> <span class="token function">plusToken</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> tokenCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>tokenCount <span class="token operator">+=</span> tokenCount<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先获取已有的统计数量，在上面累加本次用户发送消息的长度。新建一个 ChatGPT 回答消息对象<code>responseMessage</code>用于记录回答的消息。由于本次的请求是 stream 类型，所以每次响应是一个 Token（一个单词或者一个中文字）的，这边就需要阻塞一个按顺序调用<code>convertAndSendToUser</code>推送给前端。回答完毕后将用户发送的消息和 GPT 回答的消息都插入到数据库，并且更新会话消耗 Token 的统计数量。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendMessageService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MongoTemplate</span> mongoTemplate<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">GPTProperty</span> gptProperty<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ChatConfig</span> <span class="token function">checkConfig</span><span class="token punctuation">(</span><span class="token class-name">Principal</span> principal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token class-name">OpenAiService</span> <span class="token function">createOpenAIService</span><span class="token punctuation">(</span><span class="token class-name">ChatConfig</span> chatConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token class-name">ChatCompletionRequest</span> <span class="token function">createChatRequest</span><span class="token punctuation">(</span><span class="token class-name">ChatMessage</span> chatMessage<span class="token punctuation">,</span> <span class="token class-name">ChatConfig</span> chatConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 向OpenAI发起ChatGPT请求，并将响应的结果推送给前端。
     * <span class="token keyword">@param</span> <span class="token parameter">openAiService</span> 封装好的OpenAI的服务，调用就可以发起请求。
     * <span class="token keyword">@param</span> <span class="token parameter">chatCompletionRequest</span> ChatGPT请求参数
     * <span class="token keyword">@param</span> <span class="token parameter">chatMessage</span> 用户发送的消息内容
     * <span class="token keyword">@param</span> <span class="token parameter">chatSession</span> 消息归属的会话
     * <span class="token keyword">@param</span> <span class="token parameter">principal</span> 当前用户信息
     */</span>
    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">OpenAiService</span> openAiService<span class="token punctuation">,</span>
                            <span class="token class-name">ChatCompletionRequest</span> chatCompletionRequest<span class="token punctuation">,</span>
                            <span class="token class-name">ChatMessage</span> chatMessage<span class="token punctuation">,</span>
                            <span class="token class-name">ChatSession</span> chatSession<span class="token punctuation">,</span>
                            <span class="token class-name">Principal</span> principal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ChatSession<span class="token punctuation">.</span>Statistic</span> statistic <span class="token operator">=</span> chatSession<span class="token punctuation">.</span><span class="token function">getStatistic</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                                     <span class="token punctuation">.</span><span class="token function">plusChar</span><span class="token punctuation">(</span>chatMessage<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                                                     <span class="token punctuation">.</span><span class="token function">plusToken</span><span class="token punctuation">(</span>chatMessage<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">ChatMessage</span> responseMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChatMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
                                                       <span class="token punctuation">.</span><span class="token function">setRole</span><span class="token punctuation">(</span><span class="token string">&quot;assistant&quot;</span><span class="token punctuation">)</span>
                                                       <span class="token punctuation">.</span><span class="token function">setSession</span><span class="token punctuation">(</span>chatSession<span class="token punctuation">)</span><span class="token punctuation">;</span>
        openAiService<span class="token punctuation">.</span><span class="token function">streamChatCompletion</span><span class="token punctuation">(</span>chatCompletionRequest<span class="token punctuation">)</span>
                     <span class="token punctuation">.</span><span class="token function">doOnError</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span><span class="token operator">::</span><span class="token function">printStackTrace</span><span class="token punctuation">)</span>
                     <span class="token punctuation">.</span><span class="token function">blockingForEach</span><span class="token punctuation">(</span>chunk <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                         log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                         <span class="token class-name">String</span> text <span class="token operator">=</span> chunk<span class="token punctuation">.</span><span class="token function">getChoices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                         <span class="token keyword">if</span> <span class="token punctuation">(</span>text <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                             <span class="token keyword">return</span><span class="token punctuation">;</span>
                         <span class="token punctuation">}</span>
                         statistic<span class="token punctuation">.</span><span class="token function">plusToken</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
                                  <span class="token punctuation">.</span><span class="token function">plusChar</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                         messagingTemplate<span class="token punctuation">.</span><span class="token function">convertAndSendToUser</span><span class="token punctuation">(</span>principal<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                                                <span class="token string">&quot;/queue/chatMessage/receive&quot;</span><span class="token punctuation">,</span>
                                                                text<span class="token punctuation">)</span><span class="token punctuation">;</span>
                         responseMessage<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span>responseMessage<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>
                     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        chatMessageRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>chatMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
        chatMessageRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>responseMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
        chatSessionRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>chatSession<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-组合各个步骤发送消息" tabindex="-1"><a class="header-anchor" href="#_3-组合各个步骤发送消息" aria-hidden="true">#</a> 3. 组合各个步骤发送消息</h3><p>依次按照配置校验，创建 OpenAIService，ChatGPT 请求参数，发送请求的顺序调用实现消息发送逻辑。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@Transactional</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChatMessageService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ChatSessionRepository</span> chatSessionRepository<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ChatMessageRepository</span> chatMessageRepository<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ChatMessageMapper</span> chatMessageMapper<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SendMessageService</span> sendMessageService<span class="token punctuation">;</span>

    <span class="token comment">// ...</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">ChatMessageCreateRequest</span> requestMessage<span class="token punctuation">,</span> <span class="token class-name">Principal</span> principal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ChatSession</span> chatSession <span class="token operator">=</span> chatSessionRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>requestMessage<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                                                       <span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ResultCode<span class="token punctuation">.</span>NotFindError</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ChatMessage</span> chatMessage <span class="token operator">=</span> chatMessageMapper<span class="token punctuation">.</span><span class="token function">createRequest2Entity</span><span class="token punctuation">(</span>requestMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ChatConfig</span> chatConfig <span class="token operator">=</span> sendMessageService<span class="token punctuation">.</span><span class="token function">checkConfig</span><span class="token punctuation">(</span>principal<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">OpenAiService</span> openAIService <span class="token operator">=</span> sendMessageService<span class="token punctuation">.</span><span class="token function">createOpenAIService</span><span class="token punctuation">(</span>chatConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ChatCompletionRequest</span> chatRequest <span class="token operator">=</span> sendMessageService<span class="token punctuation">.</span><span class="token function">createChatRequest</span><span class="token punctuation">(</span>chatMessage<span class="token punctuation">,</span> chatConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
        sendMessageService<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>openAIService<span class="token punctuation">,</span> chatRequest<span class="token punctuation">,</span> chatMessage<span class="token punctuation">,</span> chatSession<span class="token punctuation">,</span> principal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="代码测试" tabindex="-1"><a class="header-anchor" href="#代码测试" aria-hidden="true">#</a> 代码测试</h2><h3 id="创建会话" tabindex="-1"><a class="header-anchor" href="#创建会话" aria-hidden="true">#</a> 创建会话</h3><p>调用创建聊天会话接口，得到会话 id。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>POST http://localhost:8080/chatSession/create
Content-Type: application/json

{}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>复制你调用后得到的 result。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;code&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token property">&quot;msg&quot;</span><span class="token operator">:</span> <span class="token string">&quot;操作成功&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">//   会话id</span>
  <span class="token property">&quot;result&quot;</span><span class="token operator">:</span> <span class="token string">&quot;6495a20647fbac571764c984&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;success&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="发送消息" tabindex="-1"><a class="header-anchor" href="#发送消息" aria-hidden="true">#</a> 发送消息</h3><p>安装 stompjs 和 websocket。stompjs 是在 websocket 建立的连接上用特定的协议去通信。也就是说单单安装 stompjs 无法使用，需要有 websocket 的连接才能使用。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> @stomp/stompjs ws
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>HomeView.vue</code>中编写如下的测试代码，先是向后端发起 websocket 连接，如果握手成功则订阅<code>/user/queue/chatMessage/receive</code>。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> <span class="token punctuation">{</span>Client<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@stomp/stompjs&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">import</span> <span class="token punctuation">{</span>ref<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> prompt <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">brokerURL</span><span class="token operator">:</span> <span class="token string">&quot;ws://localhost:8080/handshake&quot;</span><span class="token punctuation">,</span>
        <span class="token function-variable function">onConnect</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            client<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>
                    <span class="token string">&quot;/user/queue/chatMessage/receive&quot;</span><span class="token punctuation">,</span>
                    <span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>value <span class="token operator">+=</span> message<span class="token punctuation">.</span>body<span class="token punctuation">)</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    client<span class="token punctuation">.</span><span class="token function">activate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token function-variable function">handleSend</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        client<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">destination</span><span class="token operator">:</span> <span class="token string">&quot;/socket/chatMessage/send&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                <span class="token literal-property property">session</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&quot;6495a20647fbac571764c984&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token literal-property property">content</span><span class="token operator">:</span> prompt<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
                <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        prompt<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>结果<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>result<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>textarea<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>提问<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>prompt<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>primary<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleSend<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>发送<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要注意，后端推送的订阅地址是<code>/queue/chatMessage/receive</code>，而用户的订阅地址是<code>/user/queue/chatMessage/receive</code>。但是为什么依然可以推送给对应的用户呢？</p><p>可以这么理解，当用户发送订阅消息<code>/user/queue/chatMessage/receive</code>时，其中的<code>/user</code>被替换成了用户 id 如：<code>/queue/chatMessage/receive-1234</code>。然后在服务端推送消息时，使用的是<code>convertAndSendToUser</code>推送给这个订阅地址<code>/queue/chatMessage/receive</code>，实际上会推送给<code>/queue/chatMessage/receive-1234</code>。这样推送和订阅的最终地址都达到了一致，并且这个地址是用户私有的。</p><p>那为什么<code>/user</code>可以被替换成用户 id 呢？因为我们之前在 <code>io.qifan.chatgpt.assistant.infrastructure.websocket.WebSocketConfig#configureMessageBroker</code>里面配置了<code>.setUserDestinationPrefix(&quot;/user&quot;)</code>。这行配置就是告诉 SpringWebSocket 遇到 <code>/user</code>开头的订阅地址要替换成用户 id，变成改用户的私有订阅地址。</p>`,41);function v(m,b){const t=e("ExternalLinkIcon");return o(),c("div",null,[u,n("blockquote",null,[k,n("p",null,[a("详细可以参考"),n("a",r,[a("Spring WebSocket"),l(t)])])]),d])}const f=p(i,[["render",v],["__file","index.html.vue"]]);export{f as default};
