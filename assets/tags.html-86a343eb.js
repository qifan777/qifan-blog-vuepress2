const n=JSON.parse(`{"key":"v-eb8b8716","path":"/project/qifan-mall/layout/tags.html","title":"页签栏","lang":"zh-CN","frontmatter":{"category":["起凡商城"],"tag":["页签栏","权限管理","后台框架"],"order":3,"date":"2024-01-18T00:00:00.000Z","timeline":true,"description":"页签栏 页签管理 Store全局缓存Tag import router from '@/router' import { defineStore, storeToRefs } from 'pinia' import type { RouteLocationPathRaw } from 'vue-router' import type { MenuDto } from '@/apis/__generated/model/dto' import { useHomeStore } from '@/stores/home-store' import { useStorage } from '@vueuse/core' // tag是基于menu拓展的，不需要太多的不必要属性，从menu中选择（id，name，menuType，icon，path）再加上（reloadKey和route（跳转路由）） export type TagMenu = Pick&lt; MenuDto['MenuRepository/COMPLEX_FETCHER'], 'id' | 'name' | 'menuType' | 'icon' | 'path' &gt; &amp; { reloadKey: number route: RouteLocationPathRaw } export const useTagStore = defineStore('tags', () =&gt; { const { menuList } = storeToRefs(useHomeStore()) // 当前激活的页签 const activeTag = useStorage&lt;TagMenu&gt;('activeTag', { id: '', menuType: 'DIRECTORY', name: '', path: '', reloadKey: 0, route: { path: '' } }) // 页签列表 const tags = useStorage&lt;TagMenu[]&gt;('tagList', []) // 打开页签的时候可以传入\\"/user\\"或者{path: \\"/user\\",query:{id:1}}这两种类型。和使用router.push差不多。 const openTag = async (path: string | RouteLocationPathRaw) =&gt; { // 如果path是 string把path变成 {path: path}格式，统一参数。 const route = typeof path == 'string' ? { path } : path // 根据path在用户的菜单列表中查找菜单 const menu = menuList.value.find((value) =&gt; value.path === route.path) // 如果菜单类型不是PAGE则返回 if (!menu || menu.menuType != 'PAGE') return const currentIndex = tags.value.findIndex((item) =&gt; { return item.path === menu.path }) // 设置激活菜单 activeTag.value = { ...menu, reloadKey: 0, route } // 如果页签列表中已经存在菜单，说明之前打开过相同的路径。不存在在新建一个页签，存在替换。 if (currentIndex === -1) { // 新增页签 tags.value.push(activeTag.value) } else { // 替换旧的页签为新的页签 tags.value.splice(currentIndex, 1, activeTag.value) } await router.push(route) return menu } const closeTag = async (index: number) =&gt; { const delItem = tags.value[index] // 删除页签 tags.value.splice(index, 1) // [1,2,3,4] 如果删除索引2，对应的元素是3。删除后列表变为[1,2,4]，此时索引2对应的元素是4。 // [1,2,3] 如果删除索引2，删除后的列表变为[1,2]，此时索引2对应的元素为空。 // [1] 如果删除索引为0，删除后的列表变为[]，此时索引0对应的元素为空。 // 根据上面的三个例子可以知道，当关闭一个页签时，有三种选择 // 1. 打开删除后列表的相同索引（原来后面的，选择补位到前面了） // 2. 打开删除后列表的前面所有（原来前面的） // 3. 删除后列表已经为空了，打开首页。 const item = tags.value[index] ? tags.value[index] : tags.value[index - 1] if (item) { delItem.id === activeTag.value.id &amp;&amp; (await openTag(item.path)) } else { // 回到首页 await router.push('/') } } // 清空页签，并回到首页 const closeAll = async () =&gt; { tags.value = [] await router.push('/') } // 关闭其他页签 const closeOther = (tag: TagMenu) =&gt; { tags.value = [tag] } return { activeTag, tags, closeTag, closeAll, closeOther, openTag } })","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/qifan-blog-vuepress2/project/qifan-mall/layout/tags.html"}],["meta",{"property":"og:site_name","content":"起凡Code闲聊"}],["meta",{"property":"og:title","content":"页签栏"}],["meta",{"property":"og:description","content":"页签栏 页签管理 Store全局缓存Tag import router from '@/router' import { defineStore, storeToRefs } from 'pinia' import type { RouteLocationPathRaw } from 'vue-router' import type { MenuDto } from '@/apis/__generated/model/dto' import { useHomeStore } from '@/stores/home-store' import { useStorage } from '@vueuse/core' // tag是基于menu拓展的，不需要太多的不必要属性，从menu中选择（id，name，menuType，icon，path）再加上（reloadKey和route（跳转路由）） export type TagMenu = Pick&lt; MenuDto['MenuRepository/COMPLEX_FETCHER'], 'id' | 'name' | 'menuType' | 'icon' | 'path' &gt; &amp; { reloadKey: number route: RouteLocationPathRaw } export const useTagStore = defineStore('tags', () =&gt; { const { menuList } = storeToRefs(useHomeStore()) // 当前激活的页签 const activeTag = useStorage&lt;TagMenu&gt;('activeTag', { id: '', menuType: 'DIRECTORY', name: '', path: '', reloadKey: 0, route: { path: '' } }) // 页签列表 const tags = useStorage&lt;TagMenu[]&gt;('tagList', []) // 打开页签的时候可以传入\\"/user\\"或者{path: \\"/user\\",query:{id:1}}这两种类型。和使用router.push差不多。 const openTag = async (path: string | RouteLocationPathRaw) =&gt; { // 如果path是 string把path变成 {path: path}格式，统一参数。 const route = typeof path == 'string' ? { path } : path // 根据path在用户的菜单列表中查找菜单 const menu = menuList.value.find((value) =&gt; value.path === route.path) // 如果菜单类型不是PAGE则返回 if (!menu || menu.menuType != 'PAGE') return const currentIndex = tags.value.findIndex((item) =&gt; { return item.path === menu.path }) // 设置激活菜单 activeTag.value = { ...menu, reloadKey: 0, route } // 如果页签列表中已经存在菜单，说明之前打开过相同的路径。不存在在新建一个页签，存在替换。 if (currentIndex === -1) { // 新增页签 tags.value.push(activeTag.value) } else { // 替换旧的页签为新的页签 tags.value.splice(currentIndex, 1, activeTag.value) } await router.push(route) return menu } const closeTag = async (index: number) =&gt; { const delItem = tags.value[index] // 删除页签 tags.value.splice(index, 1) // [1,2,3,4] 如果删除索引2，对应的元素是3。删除后列表变为[1,2,4]，此时索引2对应的元素是4。 // [1,2,3] 如果删除索引2，删除后的列表变为[1,2]，此时索引2对应的元素为空。 // [1] 如果删除索引为0，删除后的列表变为[]，此时索引0对应的元素为空。 // 根据上面的三个例子可以知道，当关闭一个页签时，有三种选择 // 1. 打开删除后列表的相同索引（原来后面的，选择补位到前面了） // 2. 打开删除后列表的前面所有（原来前面的） // 3. 删除后列表已经为空了，打开首页。 const item = tags.value[index] ? tags.value[index] : tags.value[index - 1] if (item) { delItem.id === activeTag.value.id &amp;&amp; (await openTag(item.path)) } else { // 回到首页 await router.push('/') } } // 清空页签，并回到首页 const closeAll = async () =&gt; { tags.value = [] await router.push('/') } // 关闭其他页签 const closeOther = (tag: TagMenu) =&gt; { tags.value = [tag] } return { activeTag, tags, closeTag, closeAll, closeOther, openTag } })"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-18T14:27:26.000Z"}],["meta",{"property":"article:author","content":"起凡"}],["meta",{"property":"article:tag","content":"页签栏"}],["meta",{"property":"article:tag","content":"权限管理"}],["meta",{"property":"article:tag","content":"后台框架"}],["meta",{"property":"article:published_time","content":"2024-01-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-18T14:27:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"页签栏\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-18T14:27:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"起凡\\",\\"url\\":\\"https://www.jarcheng.top\\"}]}"]]},"headers":[{"level":2,"title":"Store全局缓存Tag","slug":"store全局缓存tag","link":"#store全局缓存tag","children":[]},{"level":2,"title":"页签组件","slug":"页签组件","link":"#页签组件","children":[]},{"level":2,"title":"页签栏组件","slug":"页签栏组件","link":"#页签栏组件","children":[]},{"level":2,"title":"侧边栏菜单页签联动","slug":"侧边栏菜单页签联动","link":"#侧边栏菜单页签联动","children":[]},{"level":2,"title":"展示页签栏","slug":"展示页签栏","link":"#展示页签栏","children":[]},{"level":2,"title":"路由拦截","slug":"路由拦截","link":"#路由拦截","children":[]}],"git":{"createdTime":1705542052000,"updatedTime":1705588046000,"contributors":[{"name":"linjiacheng","email":"1507906763@qq.com","commits":2}]},"readingTime":{"minutes":5.62,"words":1685},"filePathRelative":"project/qifan-mall/layout/tags.md","localizedDate":"2024年1月18日","excerpt":"<h1> 页签栏</h1>\\n<div style=\\"text-align:center\\">\\n<figure><figcaption>页签管理</figcaption></figure>\\n</div>\\n<h2> Store全局缓存Tag</h2>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">import</span> router <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'@/router'</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">{</span> defineStore<span class=\\"token punctuation\\">,</span> storeToRefs <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'pinia'</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token keyword\\">type</span> <span class=\\"token punctuation\\">{</span> RouteLocationPathRaw <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'vue-router'</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token keyword\\">type</span> <span class=\\"token punctuation\\">{</span> MenuDto <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'@/apis/__generated/model/dto'</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">{</span> useHomeStore <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'@/stores/home-store'</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">{</span> useStorage <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'@vueuse/core'</span>\\n<span class=\\"token comment\\">// tag是基于menu拓展的，不需要太多的不必要属性，从menu中选择（id，name，menuType，icon，path）再加上（reloadKey和route（跳转路由））</span>\\n<span class=\\"token keyword\\">export</span> <span class=\\"token keyword\\">type</span> <span class=\\"token class-name\\">TagMenu</span> <span class=\\"token operator\\">=</span> Pick<span class=\\"token operator\\">&lt;</span>\\n  MenuDto<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'MenuRepository/COMPLEX_FETCHER'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token string\\">'id'</span> <span class=\\"token operator\\">|</span> <span class=\\"token string\\">'name'</span> <span class=\\"token operator\\">|</span> <span class=\\"token string\\">'menuType'</span> <span class=\\"token operator\\">|</span> <span class=\\"token string\\">'icon'</span> <span class=\\"token operator\\">|</span> <span class=\\"token string\\">'path'</span>\\n<span class=\\"token operator\\">&gt;</span> <span class=\\"token operator\\">&amp;</span> <span class=\\"token punctuation\\">{</span>\\n  reloadKey<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">number</span>\\n  route<span class=\\"token operator\\">:</span> RouteLocationPathRaw\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">export</span> <span class=\\"token keyword\\">const</span> useTagStore <span class=\\"token operator\\">=</span> <span class=\\"token function\\">defineStore</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'tags'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">{</span> menuList <span class=\\"token punctuation\\">}</span> <span class=\\"token operator\\">=</span> <span class=\\"token function\\">storeToRefs</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">useHomeStore</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token comment\\">// 当前激活的页签</span>\\n  <span class=\\"token keyword\\">const</span> activeTag <span class=\\"token operator\\">=</span> <span class=\\"token generic-function\\"><span class=\\"token function\\">useStorage</span><span class=\\"token generic class-name\\"><span class=\\"token operator\\">&lt;</span>TagMenu<span class=\\"token operator\\">&gt;</span></span></span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'activeTag'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span>\\n    id<span class=\\"token operator\\">:</span> <span class=\\"token string\\">''</span><span class=\\"token punctuation\\">,</span>\\n    menuType<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'DIRECTORY'</span><span class=\\"token punctuation\\">,</span>\\n    name<span class=\\"token operator\\">:</span> <span class=\\"token string\\">''</span><span class=\\"token punctuation\\">,</span>\\n    path<span class=\\"token operator\\">:</span> <span class=\\"token string\\">''</span><span class=\\"token punctuation\\">,</span>\\n    reloadKey<span class=\\"token operator\\">:</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span>\\n    route<span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span> path<span class=\\"token operator\\">:</span> <span class=\\"token string\\">''</span> <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token comment\\">// 页签列表</span>\\n  <span class=\\"token keyword\\">const</span> tags <span class=\\"token operator\\">=</span> <span class=\\"token generic-function\\"><span class=\\"token function\\">useStorage</span><span class=\\"token generic class-name\\"><span class=\\"token operator\\">&lt;</span>TagMenu<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">&gt;</span></span></span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'tagList'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token comment\\">// 打开页签的时候可以传入\\"/user\\"或者{path: \\"/user\\",query:{id:1}}这两种类型。和使用router.push差不多。</span>\\n  <span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">openTag</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">async</span> <span class=\\"token punctuation\\">(</span>path<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span> <span class=\\"token operator\\">|</span> RouteLocationPathRaw<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 如果path是 string把path变成 {path: path}格式，统一参数。</span>\\n    <span class=\\"token keyword\\">const</span> route <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">typeof</span> path <span class=\\"token operator\\">==</span> <span class=\\"token string\\">'string'</span> <span class=\\"token operator\\">?</span> <span class=\\"token punctuation\\">{</span> path <span class=\\"token punctuation\\">}</span> <span class=\\"token operator\\">:</span> path\\n    <span class=\\"token comment\\">// 根据path在用户的菜单列表中查找菜单</span>\\n    <span class=\\"token keyword\\">const</span> menu <span class=\\"token operator\\">=</span> menuList<span class=\\"token punctuation\\">.</span>value<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">find</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>value<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> value<span class=\\"token punctuation\\">.</span>path <span class=\\"token operator\\">===</span> route<span class=\\"token punctuation\\">.</span>path<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token comment\\">// 如果菜单类型不是PAGE则返回</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>menu <span class=\\"token operator\\">||</span> menu<span class=\\"token punctuation\\">.</span>menuType <span class=\\"token operator\\">!=</span> <span class=\\"token string\\">'PAGE'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span>\\n    <span class=\\"token keyword\\">const</span> currentIndex <span class=\\"token operator\\">=</span> tags<span class=\\"token punctuation\\">.</span>value<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">findIndex</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>item<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">return</span> item<span class=\\"token punctuation\\">.</span>path <span class=\\"token operator\\">===</span> menu<span class=\\"token punctuation\\">.</span>path\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token comment\\">// 设置激活菜单</span>\\n    activeTag<span class=\\"token punctuation\\">.</span>value <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token operator\\">...</span>menu<span class=\\"token punctuation\\">,</span> reloadKey<span class=\\"token operator\\">:</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> route <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token comment\\">// 如果页签列表中已经存在菜单，说明之前打开过相同的路径。不存在在新建一个页签，存在替换。</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>currentIndex <span class=\\"token operator\\">===</span> <span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// 新增页签</span>\\n      tags<span class=\\"token punctuation\\">.</span>value<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>activeTag<span class=\\"token punctuation\\">.</span>value<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// 替换旧的页签为新的页签</span>\\n      tags<span class=\\"token punctuation\\">.</span>value<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">splice</span><span class=\\"token punctuation\\">(</span>currentIndex<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> activeTag<span class=\\"token punctuation\\">.</span>value<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">await</span> router<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>route<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">return</span> menu\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">closeTag</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">async</span> <span class=\\"token punctuation\\">(</span>index<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">number</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> delItem <span class=\\"token operator\\">=</span> tags<span class=\\"token punctuation\\">.</span>value<span class=\\"token punctuation\\">[</span>index<span class=\\"token punctuation\\">]</span>\\n    <span class=\\"token comment\\">// 删除页签</span>\\n    tags<span class=\\"token punctuation\\">.</span>value<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">splice</span><span class=\\"token punctuation\\">(</span>index<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token comment\\">// [1,2,3,4] 如果删除索引2，对应的元素是3。删除后列表变为[1,2,4]，此时索引2对应的元素是4。</span>\\n    <span class=\\"token comment\\">// [1,2,3] 如果删除索引2，删除后的列表变为[1,2]，此时索引2对应的元素为空。</span>\\n    <span class=\\"token comment\\">// [1] 如果删除索引为0，删除后的列表变为[]，此时索引0对应的元素为空。</span>\\n    <span class=\\"token comment\\">// 根据上面的三个例子可以知道，当关闭一个页签时，有三种选择</span>\\n    <span class=\\"token comment\\">// 1. 打开删除后列表的相同索引（原来后面的，选择补位到前面了）</span>\\n    <span class=\\"token comment\\">// 2. 打开删除后列表的前面所有（原来前面的）</span>\\n    <span class=\\"token comment\\">// 3. 删除后列表已经为空了，打开首页。</span>\\n    <span class=\\"token keyword\\">const</span> item <span class=\\"token operator\\">=</span> tags<span class=\\"token punctuation\\">.</span>value<span class=\\"token punctuation\\">[</span>index<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">?</span> tags<span class=\\"token punctuation\\">.</span>value<span class=\\"token punctuation\\">[</span>index<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">:</span> tags<span class=\\"token punctuation\\">.</span>value<span class=\\"token punctuation\\">[</span>index <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>item<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      delItem<span class=\\"token punctuation\\">.</span>id <span class=\\"token operator\\">===</span> activeTag<span class=\\"token punctuation\\">.</span>value<span class=\\"token punctuation\\">.</span>id <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">await</span> <span class=\\"token function\\">openTag</span><span class=\\"token punctuation\\">(</span>item<span class=\\"token punctuation\\">.</span>path<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// 回到首页</span>\\n      <span class=\\"token keyword\\">await</span> router<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/'</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token comment\\">// 清空页签，并回到首页</span>\\n  <span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">closeAll</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">async</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    tags<span class=\\"token punctuation\\">.</span>value <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span>\\n    <span class=\\"token keyword\\">await</span> router<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/'</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token comment\\">// 关闭其他页签</span>\\n  <span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">closeOther</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>tag<span class=\\"token operator\\">:</span> TagMenu<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    tags<span class=\\"token punctuation\\">.</span>value <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span>tag<span class=\\"token punctuation\\">]</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">{</span>\\n    activeTag<span class=\\"token punctuation\\">,</span>\\n    tags<span class=\\"token punctuation\\">,</span>\\n    closeTag<span class=\\"token punctuation\\">,</span>\\n    closeAll<span class=\\"token punctuation\\">,</span>\\n    closeOther<span class=\\"token punctuation\\">,</span>\\n    openTag\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
